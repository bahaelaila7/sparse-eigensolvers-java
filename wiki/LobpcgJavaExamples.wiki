=Lobpcg Java Examples=


{{{ExampleDenseMatrix.java}}}
{{{
//Import MTJ classes
//see http://code.google.com/p/matrix-toolkits-java/
import no.uib.cipr.matrix.DenseMatrix;
import no.uib.cipr.matrix.Matrices;

//Import sparse eigensolver package
//see http://code.google.com/p/sparse-eigensolvers-java/
import sparse.eigenvolvers.java.*;

// This example illustrates how to find eigenvalues for a symmetric dense matrix
// Loppcg is really designed to handle sparse matrices, but this example is included as an illustration.
// There are many java programs in existence to compute eigenvalues for dense matrices.
public class ExampleDenseMatrix {
    public static void main(String[] args) {
        // Setup problem
	int n=500;
	int maxIterations=200;
	DenseMatrix A=(DenseMatrix) Matrices.random(n,n);
	//Make it symmetric
	DenseMatrix Temp=A.copy();
	A.add(Temp.transpose());
	Lobpcg lobpcg=new Lobpcg();
	
	// Run lobpcg with mostly default parameters
	lobpcg.runLobpcg(A,maxIterations);
	
	// Now eigenvectors are transferred to blockVectorX
	DenseMatrix blockVectorX=lobpcg.getEigenvectors();
	// Can obtain eigenvalues for further processing in dense matrix
	Utilities.print(lobpcg.getEigenvaluesMatrix());
	// Or get eigenvalues in double array
	Utilities.print(lobpcg.getEigenvalues());
	
	// Now run lobpcg again to compute largest eigenvalues
	int verbosityLevel=0;
	A.scale(-1);
	lobpcg.runLobpcg(A,maxIterations,verbosityLevel); // no output
	// Print negative of largest eigenvalues
	Utilities.print(lobpcg.getEigenvaluesMatrix());
    }
}
}}}


{{{ExampleLaplacianOperator.java}}}
{{{
//Import MTJ classes
//see http://code.google.com/p/matrix-toolkits-java/
import no.uib.cipr.matrix.DenseMatrix;
import no.uib.cipr.matrix.Matrices;
import no.uib.cipr.matrix.Matrix.Norm;
import no.uib.cipr.matrix.sparse.CompRowMatrix;

//Import sparse eigensolver package
//see http://code.google.com/p/sparse-eigensolvers-java/
import sparse.eigenvolvers.java.*;

public class ExampleLaplacianOperator {
	
// This example illustrates how to find eigenvalues for a sparse operator stored
// in compressed row format.
// We generate a 3D Laplacian for testing purposes and check the computed eigenvalues
// against those computed theoretically.
public static void main(String[] args) {
	// Setup problem
	int blockSize=20;
	int maxIterations=100;
	double tolerance=1e-8;
	int verbosityLevel=1;
	int innerIterations=5;
	int nx=20,ny=20,nz=20;
	double error;
	Lobpcg lobpcg=new Lobpcg();
	CompRowMatrix ACompRow=Utilities.getLaplacian(nx,ny,nz); //Laplacian 20 x 20 x 20
	int n=ACompRow.numColumns();
	DenseMatrix blockVectorX=(DenseMatrix) Matrices.random(n,blockSize);
				
	// Run without preconditioner which takes many more iterations
	maxIterations=300;
	lobpcg.runLobpcg(blockVectorX,ACompRow,tolerance,maxIterations,verbosityLevel);
		
	// Run lobpcg with preconditioner which takes many fewer iterations
	// We need place holder "null" since we are not solving
	// a generalized eigenvalue problem and there is no operB
	// Use conjugate gradient preconditioner (operT approximates inverse of ACompRow)
	OperatorPrecCG operT= new OperatorPrecCG(ACompRow); 
	operT.setCGNumberIterations(innerIterations); // Need to try different values to see best convergence
	maxIterations=80;
	blockVectorX=(DenseMatrix) Matrices.random(n,blockSize);
	lobpcg.runLobpcg(blockVectorX,ACompRow,null,operT,tolerance,maxIterations,verbosityLevel);
	error=Utilities.sub(Utilities.getLaplacianEigenvalues(blockSize,nx,ny,nz),
	lobpcg.getEigenvaluesMatrix()).norm(Norm.Frobenius);
		
	System.out.println("Test results against theoretically computed eigenvalues:");
	System.out.printf("Error= %e (Laplacian 20 x 20 x 20 with preconditioner)\n",error);
	}
}
}}}

{{{ExampleMatrixMarket.java}}}
{{{
//Import MTJ classes
//see http://code.google.com/p/matrix-toolkits-java/
import no.uib.cipr.matrix.DenseMatrix;
import no.uib.cipr.matrix.sparse.CompRowMatrix;

//Import sparse eigensolver package
//see http://code.google.com/p/sparse-eigensolvers-java/
import sparse.eigenvolvers.java.*;

// This example illustrates how user can find several of the largest eigenvalues 
// after loading a matrix market file
// Note that string file needs to be defined based on where user stores matrix market files
// See http://math.nist.gov/MatrixMarket/
public class ExampleMatrixMarket {
	public static void main(String[] args) {
		// Problem setup
		int blockSize=10;
		int maxIterations=100;
		int verbosityLevel=1;
		double tolerance=1e-6;
		String file="C:\\MatrixMarket\\plat1919.mtx";
		Lobpcg lobpcg=new Lobpcg();
		CompRowMatrix A=Utilities.readMatrixMarketFile(file);
		A.scale(-1); // Multiply operator times -1 to compute the largest eigenvalues
		
		// Run lobpcg
		// Note that if the first parameter is an integer, a random set of starting vectors
		// defining the initial subspace is generated inside lobpcg
		lobpcg.runLobpcg(blockSize,A,tolerance,maxIterations,verbosityLevel);
		
		// Now eigenvectors are transferred to blockVectorX
		DenseMatrix blockVectorX=lobpcg.getEigenvectors();
		// Can obtain eigenvalues for further processing in dense matrix
		Utilities.print(lobpcg.getEigenvaluesMatrix());
		// Or get eigenvalues in double array
		Utilities.print(lobpcg.getEigenvalues());
	}
}
}}}